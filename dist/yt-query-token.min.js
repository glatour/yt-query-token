(function() {
  angular
    .module('yt-query-token', ["angular-bacon"])
    .directive('query', function() {
      return {
        restrict: 'E',
        templateUrl: 'query.html',
        controller: ['$scope', queryController],
        scope: {
          tokens: '='
        },
        link: function(scope, ele, attrs, scope) {
          var queryInput = $(ele[0]).children()[0];
          $(ele)
            .asEventStream('click')
            .filter(function(it) {
              return queryInput === it.target;
            })
            .onValue(function(it) {
              for (var i = scope.childScopes.length - 1; i >= 0; i--) {
                var handled = scope.childScopes[i].selectIfEmpty();
                if (handled) return true;
              };
              return false;
            });
        }
      }
    });

  function queryController($scope) {
    $scope._tokens = [new Token(0)];
    $scope.tokens = [];
    this.childScopes = [];

    this.addToken = function(manuallyAdded) {
      if ($scope._tokens[$scope._tokens.length - 1].key != '' && $scope._tokens[$scope._tokens.length - 1].value != '') {
        var token = new Token($scope._tokens.length);
        token.manuallyAdded = manuallyAdded;
        $scope._tokens.push(token);
      }
    }

    this.selectNextToken = function(token) {
      for (var i = this.childScopes.length - 1; i >= 0; i--) {
        var handled = this.childScopes[i].selectIfEmpty();
        if (handled) return true;
      };
      return false;
    }

    this.removeToken = function(token) {
      Bacon
        .fromArray($scope._tokens)
        .filter(function(it) {
          return it !== token.token;
        }).scan([], function(a, b) {
          a.push(b);
          return a;
        }).digest($scope, '_tokens');
    }

    this.registerToken = function(tokenDirective) {
      this.childScopes.push(tokenDirective);
    }

    Bacon
      .fromBinder(function(sink) {
        $scope.$watchAsProperty('_tokens', true)
          .onValue(function(it) {
            var filteredArray = Bacon
              .fromArray(it)
              .filter(function(it) {
                return it.key !== '' && it.value !== '' && it.value !== '&nbsp;';
              });

            filteredArray
              .map(function(it) {
                return {
                  key: it.key,
                  value: it.value
                }
              })
              .digest($scope, 'tokens');

            filteredArray.scan('', function(a, b) {
              if (a !== '')
                a += ' and ';
              return a += b.key + ' is ' + b.value;
            }).onValue(function(it) {
              sink(it);
            });
          })
      })
      .digest($scope, 'searchQuery');
  }

  function Token(id) {
    this.id = id;
    this.key = '';
    this.value = '';
  }
})();
(function() {

  angular
    .module('yt-query-token')
    .directive('contenteditable', ['$sce',
    function($sce) {
        return {
          restrict: 'A',
          require: '?ngModel',
          link: function(scope, element, attrs, ngModel) {
            if (!ngModel) return;
            ngModel.$render = function() {
              element.html($sce.trustAsHtml(ngModel.$viewValue || ''));
            };
            element.on('blur keyup change', function() {
              scope.$evalAsync(read);
            });
            read();

            function read() {
              var html = element.html();
              if (attrs.stripBr && html == '<br>') {
                html = '';
              }
              ngModel.$setViewValue(html);
            }
          }
        };
}])
})();
(function() {
  angular
    .module('yt-query-token')
    .directive('focusMe', ['$timeout', '$parse',
      function($timeout, $parse) {
        return {
          link: function(scope, element, attrs) {
            var model = $parse(attrs.focusMe);
            scope.$watch(model, function(value) {
              if (value === true) {
                $timeout(function() {
                  element[0].focus();
                });
              }
            });
            element.bind('blur', function() {
              scope.$apply(model.assign(scope, false));
            });
          }
        };
    }])
})();
angular.module("yt-query-token").run(["$templateCache", function($templateCache) {$templateCache.put("query.html","<div class=\"query-input\"><div ng-repeat=\"token in _tokens\"><token token=\"token\"></token></div></div><div>{{searchQuery}}</div>");
$templateCache.put("token.html","<div class=\"query-token\"><div ng-model=\"token.key\" class=\"query-token-key input\" contenteditable focus-me=\"ui.isKeyFocused\"><div ng-show=\"token.value !== \'\'\">:</div><div ng-model=\"token.value\" class=\"query-token-value input\" contenteditable focus-me=\"ui.isValueFocused\"><div class=\"query-token-remove\" ng-show=\"token.value !== \'\' && token.key !== \'\'\" ng-click=\"removeToken()\">x</div></div>");}]);
(function() {
  angular
    .module('yt-query-token')
    .directive('token', ['$timeout',
      function($timeout) {
        return {
          restrict: 'E',
          scope: {
            token: '='
          },
          require: '^query',
          templateUrl: 'token.html',
          controller: ['$scope', tokenController],
          link: function(scope, ele, attrs, queryCtrl) {
            scope.queryCtrl = queryCtrl;
            queryCtrl.registerToken(scope);
            scope.ui = {
              isValueFocused: false
            };

            scope.selectIfEmpty = function() {
              if (scope.token.key === '') {
                scope.ui.isKeyFocused = true;
                scope.$apply();
                return true;
              } else if (scope.token.value === '') {
                scope.ui.isValueFocused = true;
                scope.$apply();
                return true;
              }
              return false;
            }

            scope.removeToken = function() {
              queryCtrl.removeToken(scope);
            }

            $timeout(function() {
              if (scope.token.manuallyAdded)
                $(ele).find('.query-token-key')[0].focus();
            }, 1);

            $(ele.children('.query-token-value')[0])
              .asEventStream('focus')
              .onValue(function(it) {
                if (it.target.innerHTML === '')
                  it.target.innerHTML = '&nbsp;';
              });

            $(ele.find('.query-token-value')[0])
              .asEventStream('keydown')
              .onValue(function(it) {
                if (it.target.innerHTML === '&nbsp;')
                  it.target.innerHTML = '';
                else if (it.target.innerHTML.length === 1 && it.keyCode === 8)
                  it.target.innerHTML = '&nbsp;';
                else if (((it.keyCode === 9 && !it.shiftKey) || it.keyCode === 13) && it.target.innerHTML.length > 0) {
                  queryCtrl.addToken(true);
                  queryCtrl.selectNextToken(scope);
                  it.preventDefault();
                  it.stopPropagation();
                } else
                  queryCtrl.addToken(false);
              });
          }
        }
    }]);

  function tokenController($scope) {
    var vm = this;
    $scope.$watchAsProperty('token.key', true)
      .filter(function(it) {
        return it.length > 0;
      })
      .filter(function(it) {
        return it.match(/(test|val|1|2|3)$/i);
      })
      .onValue(function(it) {
        $scope.token.value = '&nbsp;';
        $scope.ui.isValueFocused = true;
      })
  }
})();